"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9497],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(t),f=o,m=d["".concat(c,".").concat(f)]||d[f]||p[f]||i;return t?r.createElement(m,a(a({ref:n},u),{},{components:t})):r.createElement(m,a({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},80:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var r=t(3117),o=t(102),i=(t(7294),t(3905)),a=["components"],s={title:"BuildInfo",sidebar_position:6},c=void 0,l={unversionedId:"reference/build-info",id:"reference/build-info",title:"BuildInfo",description:"BuildInfo is a restricted feature and requires setting the --power option to be used.",source:"@site/docs/reference/build-info.md",sourceDirName:"reference",slug:"/reference/build-info",permalink:"/docs/reference/build-info",draft:!1,editUrl:"https://github.com/Virtuslab/scala-cli/edit/main/website/docs/reference/build-info.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"BuildInfo",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Project root directory",permalink:"/docs/reference/root-dir"},next:{title:"Supported scala versions",permalink:"/docs/reference/scala-versions"}},u={},p=[{value:"Usage",id:"usage",level:2}],d={toc:p};function f(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"BuildInfo is a restricted feature and requires setting the ",(0,i.kt)("inlineCode",{parentName:"p"},"--power")," option to be used.\nYou can pass it explicitly or set it globally by running:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"scala-cli config power true\n"))),(0,i.kt)("p",null,"During the building process Scala CLI collects information about the project's configuration,\nboth from the console options and ",(0,i.kt)("inlineCode",{parentName:"p"},"using directives")," found in the project's sources.\nYou can access this information from your code using the ",(0,i.kt)("inlineCode",{parentName:"p"},"BuildInfo")," object, that's automatically generated for your\nbuild on compile when that information changes."),(0,i.kt)("p",null,"To enable BuildInfo generation pass the ",(0,i.kt)("inlineCode",{parentName:"p"},"--build-info")," option to Scala CLI or use a\n",(0,i.kt)("inlineCode",{parentName:"p"},"//> using buildInfo")," directive."),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"The generated BuildInfo object is available on the project's classpath. To access it you need to import it first.\nIt is available in the package ",(0,i.kt)("inlineCode",{parentName:"p"},"scala.cli.build")," so use"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"import scala.cli.build.BuildInfo\n")),(0,i.kt)("p",null,"to import it."),(0,i.kt)("p",null,"Below you can find an example instance of the BuildInfo object, with all fields explained.\nSome of the values have been shortened for readability."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'package scala.cli.build\n\n/** Information about the build gathered by Scala CLI */\nobject BuildInfo {\n  /** version of Scala used to compile this project */\n  val scalaVersion = "3.3.0"\n  /** target platform of this project, it can be "JVM" or "JS" or "Native" */\n  val platform = "JVM"\n  /** version of JVM, if it\'s the target platform */\n  val jvmVersion = Some("11")\n  /** version of Scala.js, if it\'s the target platform */\n  val scalaJsVersion = None\n  /** Scala.js ECMA Script version, if Scala.js is the target platform */\n  val jsEsVersion = None\n  /** version of Scala Native, if it\'s the target platform */\n  val scalaNativeVersion = None\n  /** Main class specified for the project */\n  val mainClass = Some("Main")\n  /** Project version */\n  val projectVersion = None\n\n  /** Information about the Main scope */\n  object Main {\n    /** sources found for the scope */\n    val sources = Seq(".../Main.scala")\n    /** scalac options for the scope */\n    val scalacOptions = Seq("-Werror")\n    /** compiler plugins used in this scope */\n    val scalaCompilerPlugins = Nil\n    /** dependencies used in this scope */\n    val dependencies = Seq("com.lihaoyi:os-lib_3:0.9.1")\n    /** dependency resolvers used in this scope */\n    val resolvers = Seq("https://repo1.maven.org/maven2", "ivy:file:...")\n    /** resource directories used in this scope */\n    val resourceDirs = Seq(".../resources")\n    /** custom jars added to this scope */\n    val customJarsDecls = Seq(".../AwesomeJar1.jar", ".../AwesomeJar2.jar")\n  }\n\n  /** Information about the Test scope */\n  object Test {\n    /** sources found for the scope */\n    val sources = Seq(".../MyTests.scala")\n    /** scalac options for the scope */\n    val scalacOptions = Seq("-Vdebug")\n    /** compiler plugins used in this scope */\n    val scalaCompilerPlugins = Nil\n    /** dependencies used in this scope */\n    val dependencies = Seq("org.scala-lang:toolkit_3:latest.release")\n    /** dependency resolvers used in this scope */\n    val resolvers = Seq("https://repo1.maven.org/maven2", "ivy:file:...")\n    /** resource directories used in this scope */\n    val resourceDirs = Seq(".../test/resources")\n    /** custom jars added to this scope */\n    val customJarsDecls = Nil\n  }\n}\n')))}f.isMDXComponent=!0}}]);