"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1596],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return m}});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(a),m=o,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||r;return a?n.createElement(g,i(i({ref:t},p),{},{components:a})):n.createElement(g,i({ref:t},p))}));function m(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},8684:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var n=a(3117),o=a(102),r=(a(7294),a(3905)),i=["components"],s={title:"Packaging Scala applications as executable files",sidebar_position:14},l=void 0,c={unversionedId:"cookbooks/scala-package",id:"cookbooks/scala-package",title:"Packaging Scala applications as executable files",description:"Scala CLI lets you package your application into a lightweight JAR file that can be easily run.",source:"@site/docs/cookbooks/scala-package.md",sourceDirName:"cookbooks",slug:"/cookbooks/scala-package",permalink:"/docs/cookbooks/scala-package",draft:!1,editUrl:"https://github.com/Virtuslab/scala-cli/edit/main/website/docs/cookbooks/scala-package.md",tags:[],version:"current",sidebarPosition:14,frontMatter:{title:"Packaging Scala applications as executable files",sidebar_position:14},sidebar:"tutorialSidebar",previous:{title:"Scala CLI within Emacs",permalink:"/docs/cookbooks/emacs"},next:{title:"Packaging Scala applications as Docker images",permalink:"/docs/cookbooks/scala-docker"}},p={},u=[{value:"Default format (lightweight launcher)",id:"default-format-lightweight-launcher",level:3},{value:"Assemblies",id:"assemblies",level:3}],d={toc:u};function m(e){var t=e.components,a=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Scala CLI lets you package your application into a lightweight JAR file that can be easily run.\nThe JAR file only contains the byte code that\u2019s generated from your source code files, and automatically downloads its dependencies on its first run."),(0,r.kt)("p",null,"As an example, the following snippet contains a short application to detect the OS:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala",metastring:"title=DetectOsApp.scala",title:"DetectOsApp.scala"},'object DetectOsApp extends App  {\n    def getOperatingSystem(): String = {\n        val os: String = System.getProperty("os.name")\n        os\n    }\n    println(s"os: ${getOperatingSystem()}")\n}\n')),(0,r.kt)("h3",{id:"default-format-lightweight-launcher"},"Default format (lightweight launcher)"),(0,r.kt)("p",null,"By default, the ",(0,r.kt)("inlineCode",{parentName:"p"},"package")," sub-command generates a lightweight JAR that contains only your bytecode. This is how you create a lightweight JAR named ",(0,r.kt)("inlineCode",{parentName:"p"},"DetectOsApp.jar"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"scala-cli --power package DetectOsApp.scala\n")),(0,r.kt)("p",null,"Lightweight JARs require the ",(0,r.kt)("inlineCode",{parentName:"p"},"java")," command to be available, and access to the internet, if dependencies need to be downloaded. This is how you run it on macOS:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Run DetectOsApp on macOS\n./DetectOsApp\n# os: Mac OS X\n")),(0,r.kt)("p",null,"The lightweight JAR that was just built on macOS can also run on Linux:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Run DetectOsApp on Linux\n./DetectOsApp\n# os: Linux\n")),(0,r.kt)("p",null,"Scala CLI supports building Lightweight JARs in the macOS, Linux, and Windows environments.\nJARs built on macOS and Linux are portable between these two operating systems.\nLightweight JARs built on Windows can only be run on Windows."),(0,r.kt)("h3",{id:"assemblies"},"Assemblies"),(0,r.kt)("p",null,"Passing ",(0,r.kt)("inlineCode",{parentName:"p"},"--assembly")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"package"),' sub-command generates so-called "assemblies," or "fat JARs":'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"scala-cli --power package --assembly DetectOsApp.scala\n")),(0,r.kt)("p",null,"Assemblies also require the ",(0,r.kt)("inlineCode",{parentName:"p"},"java")," command to be available in the ",(0,r.kt)("inlineCode",{parentName:"p"},"PATH"),". But in this case, all of the dependencies that are needed are packaged into the assembly, so nothing gets downloaded upon the first run, and no internet access is required."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Run DetectOsApp on macOS\n./DetectOsApp\n# os: Mac OS X\n")))}m.isMDXComponent=!0}}]);