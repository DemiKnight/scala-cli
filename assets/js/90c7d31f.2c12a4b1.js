"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5698],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return f}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(r),f=a,m=u["".concat(c,".").concat(f)]||u[f]||d[f]||i;return r?n.createElement(m,o(o({ref:t},p),{},{components:r})):n.createElement(m,o({ref:t},p))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},8151:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return d}});var n=r(3117),a=r(102),i=(r(7294),r(3905)),o=["components"],l={title:"Project root directory",sidebar_position:5},c=void 0,s={unversionedId:"reference/root-dir",id:"reference/root-dir",title:"Project root directory",description:"Usage",source:"@site/docs/reference/root-dir.md",sourceDirName:"reference",slug:"/reference/root-dir",permalink:"/docs/reference/root-dir",draft:!1,editUrl:"https://github.com/Virtuslab/scala-cli/edit/main/website/docs/reference/root-dir.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Project root directory",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Dependency format",permalink:"/docs/reference/dependency"},next:{title:"Interaction with Bloop server",permalink:"/docs/reference/bloop"}},p={},d=[{value:"Usage",id:"usage",level:2},{value:"Setting root directory",id:"setting-root-directory",level:2},{value:"Example",id:"example",level:4}],u={toc:d};function f(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"Scala CLI needs a root directory:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"to write mapped sources"),(0,i.kt)("li",{parentName:"ul"},"to write class files"),(0,i.kt)("li",{parentName:"ul"},"for Bloop")),(0,i.kt)("h2",{id:"setting-root-directory"},"Setting root directory"),(0,i.kt)("p",null,"First of all, Scala CLI checks every passed input (in the same order in which inputs were passed) for the ",(0,i.kt)("inlineCode",{parentName:"p"},"project.scala")," file:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If the ",(0,i.kt)("inlineCode",{parentName:"li"},"project.scala")," file is passed explicitly as a ",(0,i.kt)("strong",{parentName:"li"},"source"),", Scala CLI sets its parent directory as the root directory."),(0,i.kt)("li",{parentName:"ul"},"If the input is a ",(0,i.kt)("strong",{parentName:"li"},"directory"),", Scala CLI looks for the ",(0,i.kt)("inlineCode",{parentName:"li"},"project.scala")," inside this directory. If the file is found, Scala CLI sets the passed directory as the root directory.")),(0,i.kt)("p",null,"If more than one ",(0,i.kt)("inlineCode",{parentName:"p"},"project.scala")," file is found, Scala CLI uses only ",(0,i.kt)("strong",{parentName:"p"},"the first one")," to set the root directory and raises ",(0,i.kt)("strong",{parentName:"p"},"warning")," saying which one was used."),(0,i.kt)("p",null,"If no ",(0,i.kt)("inlineCode",{parentName:"p"},"project.scala")," files are found, Scala CLI sets the root directory based on the first file/directory input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If the input is a ",(0,i.kt)("strong",{parentName:"li"},"directory"),", it is set as the root directory. "),(0,i.kt)("li",{parentName:"ul"},"If the input is a ",(0,i.kt)("strong",{parentName:"li"},"file"),", Scala CLI sets its parent directory as the root directory. ")),(0,i.kt)("p",null,"If more then one file/directory input has ben passed Scala CLI raises the warning saying which directory has been set as the project root directory."),(0,i.kt)("p",null,"If no ",(0,i.kt)("inlineCode",{parentName:"p"},"project.scala")," files are found and no file/directory inputs have ben passed, Scala CLI sets the current working directory (where Scala CLI was invoked from) as the project root directory."),(0,i.kt)("h4",{id:"example"},"Example"),(0,i.kt)("p",null,"Let's say we have the following file structure:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"project\n\u2502   project.scala\n\u2502\n\u2514\u2500\u2500\u2500dir1\n\u2502   \u2502   file1.scala\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500\u2500dir2\n\u2502       \u2502   project.scala\n\u2502       \u2502   file2.scala\n\u2502   \n\u2514\u2500\u2500\u2500dir3\n    \u2502   project.scala\n    \u2502   file3.scala\n")),(0,i.kt)("p",null,"And user runs the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"project> scala-cli dir1/file1.scala dir1/dir2 dir3/project.scala\n")),(0,i.kt)("p",null,"Scala CLI will find 2 ",(0,i.kt)("inlineCode",{parentName:"p"},"project.scala")," files:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"inside ",(0,i.kt)("inlineCode",{parentName:"li"},"dir2"),", since this directory was passed as an input and it has ",(0,i.kt)("inlineCode",{parentName:"li"},"project.scala")," inside."),(0,i.kt)("li",{parentName:"ul"},"inside ",(0,i.kt)("inlineCode",{parentName:"li"},"dir3"),", since ",(0,i.kt)("inlineCode",{parentName:"li"},"dir3/project.scala")," was passed explicitly as a source")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"dir1/dir2")," was passed before ",(0,i.kt)("inlineCode",{parentName:"p"},"dir3/project.scala"),", so ",(0,i.kt)("inlineCode",{parentName:"p"},"dir2")," will be set as the ",(0,i.kt)("strong",{parentName:"p"},"root")," directory for this build. "),(0,i.kt)("p",null,"Since more than one ",(0,i.kt)("inlineCode",{parentName:"p"},"project.scala")," has been found, Scala CLI will raise the warning saying that more than one ",(0,i.kt)("inlineCode",{parentName:"p"},"project.scala")," file has been found and ",(0,i.kt)("inlineCode",{parentName:"p"},"dir1/dir2")," has been set as the project root directory."))}f.isMDXComponent=!0}}]);